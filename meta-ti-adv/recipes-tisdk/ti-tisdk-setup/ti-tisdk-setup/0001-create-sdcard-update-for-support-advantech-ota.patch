diff --git a/create-sdcard.sh b/create-sdcard.sh
index 654946f..6e19112 100644
--- a/create-sdcard.sh
+++ b/create-sdcard.sh
@@ -345,6 +345,9 @@ echo ""
 
 DRIVE=/dev/$DEVICEDRIVENAME
 NUM_OF_DRIVES=`df | grep -c $DEVICEDRIVENAME`
+if [ "$NUM_OF_DRIVES" -gt 4 ]; then
+NUM_OF_DRIVES=`expr $NUM_OF_DRIVES + 1`
+fi
 
 # This if statement will determine if we have a mounted sdX or mmcblkX device.
 # If it is mmcblkX, then we need to set an extra char in the partition names, 'p',
@@ -423,7 +426,7 @@ cat << EOM
 
    Detected device has $PARTS partitions already
 
-   Re-partitioning will allow the choice of 2 or 3 partitions
+   Re-partitioning will allow the choice of 2 or 3 or 5 partitions
 
 ################################################################################
 
@@ -456,6 +459,7 @@ cat << EOM
 	Select 2 partitions if only need boot and rootfs (most users).
 	Select 3 partitions if need SDK & other content on SD card.  This is
         usually used by device manufacturers with access to partition tarballs.
+	Select 5 partitions if need customize recovery & misc and cache partitions.
 
 	****WARNING**** continuing will erase all data on $DEVICEDRIVENAME
 
@@ -466,15 +470,16 @@ EOM
 	while [ $ENTERCORRECTLY -ne 1 ]
 	do
 
-		read -p 'Number of partitions needed [2/3] : ' CASEPARTITIONNUMBER
+		read -p 'Number of partitions needed [2/3/5] : ' CASEPARTITIONNUMBER
 		echo ""
 		echo " "
 		ENTERCORRECTLY=1
 		case $CASEPARTITIONNUMBER in
 		"2")  echo "Now partitioning $DEVICEDRIVENAME with 2 partitions...";PARTITION=2;;
 		"3")  echo "Now partitioning $DEVICEDRIVENAME with 3 partitions...";PARTITION=3;;
+		"5")  echo "Now partitioning $DEVICEDRIVENAME with 5 partitions...";PARTITION=5;;
 		"n")  exit;;
-		*)  echo "Please enter 2 or 3";ENTERCORRECTLY=0;;
+		*)  echo "Please enter 2 or 3 or 5";ENTERCORRECTLY=0;;
 		esac
 		echo " "
 	done
@@ -483,9 +488,119 @@ fi
 
 
 #Section for partitioning the drive
+#create 5 partitions
+if [ "$PARTITION" -eq "5" ]
+then
+
+# set the PARTS value as well
+PARTS=5
+
+cat << EOM
+
+################################################################################
+
+               Now making 5 partitions
+
+################################################################################
+
+EOM
+
+dd if=/dev/zero of=$DRIVE bs=1024 count=1024
+
+SIZE=`fdisk -l $DRIVE | grep Disk | awk '{print $5}'`
+
+echo DISK SIZE - $SIZE bytes
+
+cat << END | fdisk $DRIVE
+n
+p
+1
+
++128M
+n
+p
+2
+
++2.4G
+n
+p
+3
+
++128M
+n
+e
+4
+
+
+n
+l
+5
+
++32M
+n
+l
+6
+
+
+t
+1
+c
+a
+1
+w
+END
+
+
+cat << EOM
+
+################################################################################
+
+               Partitioning Boot
+
+################################################################################
+EOM
+       mkfs.vfat -F 32 -n "boot" ${DRIVE}${P}1
+cat << EOM
+
+################################################################################
+
+               Partitioning rootfs
+
+################################################################################
+EOM
+       mkfs.ext3 -L "rootfs" ${DRIVE}${P}2
+cat << EOM
+
+################################################################################
+
+               Partitioning recovery
+
+################################################################################
+EOM
+       mkfs.ext3 -L "recovery" ${DRIVE}${P}3
+cat << EOM
+
+################################################################################
+
+               Partitioning misc
+
+################################################################################
+EOM
+       mkfs.ext3 -L "misc" ${DRIVE}${P}5
+cat << EOM
+
+################################################################################
+
+               Partitioning cache
+
+################################################################################
+EOM
+       mkfs.ext3 -L "cache" ${DRIVE}${P}6
+       sync
+       sync
 
 #create 3 partitions
-if [ "$PARTITION" -eq "3" ]
+elif [ "$PARTITION" -eq "3" ]
 then
 
 # set the PARTS value as well
@@ -671,15 +786,28 @@ mkdir $START_DIR/tmp
 export PATH_TO_SDBOOT=boot
 export PATH_TO_SDROOTFS=rootfs
 export PATH_TO_TMP_DIR=$START_DIR/tmp
+if [ "$PARTS" -eq "2" ]
+then
+mkdir $START_DIR/initramfstmp
+export PATH_TO_SDINITRAMFS=initramfs
+fi
 
 
 echo " "
 echo "Mount the partitions "
 mkdir $PATH_TO_SDBOOT
 mkdir $PATH_TO_SDROOTFS
+if [ "$PARTS" -eq "2" ]
+then
+mkdir $PATH_TO_SDINITRAMFS
+fi
 
 sudo mount -t vfat ${DRIVE}${P}1 boot/
 sudo mount -t ext3 ${DRIVE}${P}2 rootfs/
+if [ "$PARTS" -eq "5" ]
+then
+sudo mount -t ext3 ${DRIVE}${P}3 initramfs/
+fi
 
 
 
@@ -688,6 +816,10 @@ echo "Emptying partitions "
 echo " "
 sudo rm -rf  $PATH_TO_SDBOOT/*
 sudo rm -rf  $PATH_TO_SDROOTFS/*
+if [ "$PARTS" -eq "2" ]
+then
+sudo rm -rf  $PATH_TO_SDINITRAMFS/*
+fi
 
 echo ""
 echo "Syncing...."
@@ -1197,6 +1329,49 @@ elif [ $ROOTFSPATHOPTION -eq 2  ] ; then
 	untar_progress $ROOTFSUSERFILEPATH $PATH_TO_SDROOTFS
 fi
 
+if [ "$PARTS" -ne "5" ]
+then
+       sed -i '/cache/d' $PATH_TO_SDROOTFS/etc/fstab
+fi
+
+if [ "$PARTS" -eq "2" ]
+then
+       #Make sure there is only 1 initramfs
+       CHECKNUMOFRAMFS=`ls $ROOTFILEPARTH | grep "initramfs.*debug" | grep 'cpio.gz' | grep -n '' | grep '2:' | awk {'print $1'}`
+       if [ -n "$CHECKNUMOFRAMFS" ]
+       then
+cat << EOM
+
+################################################################################
+
+   Multiple initramfs Tarballs found
+
+################################################################################
+
+EOM
+               ls $PARSEPATH/filesystem/ | grep "initramfs.*debug" | grep 'cpio.gz' | grep -n '' | awk {'print "	" , $1'}
+               echo ""
+               read -p "Enter Number of rootfs Tarball: " TARNUMBER
+               echo " "
+               FOUNDTARFILENAME=`ls $PARSEPATH/filesystem/ | grep "initramfs.*debug" | grep 'cpio.gz' | grep -n '' | grep "${TARNUMBER}:" | cut -c3- | awk {'print$1'}`
+               INITRAMFS=$FOUNDTARFILENAME
+
+       else
+               INITRAMFS=`ls  $PARSEPATH/filesystem/ | grep "initramfs.*debug" | grep 'cpio.gz' | awk {'print $1'}`
+       fi
+
+       INITRAMFSUSERFILEPATH=$PARSEPATH/filesystem/$INITRAMFS
+       sudo cp $PARSEPATH/filesystem/*.cpio.gz $START_DIR/initramfstmp
+       cd $START_DIR/initramfstmp
+       zcat *.cpio.gz | cpio -idmv  > /dev/zero 2>&1
+       sync
+       sudo rm *.cpio.gz
+       cd $START_DIR/initramfstmp/
+       tar -cJf ../initramfs.tar.xz *
+       cd $START_DIR
+       sync
+fi
+
 echo ""
 echo ""
 if [ "$KERNELFILESOPTION" == "2" ]
@@ -1230,6 +1405,55 @@ then
 
 fi
 
+read -p "Do you need to copy iNAND upgrate tools(y/n): " REPLY
+if [ "$REPLY" = 'y' -o "$REPLY" = 'Y' ]; then
+       echo "[Copying iNAND upgrate tools...]"
+       mkdir -p  $PATH_TO_SDROOTFS/mk_inand
+       mkdir -p  $PATH_TO_SDROOTFS/image
+       if [ $FILEPATHOPTION -eq 1 ] ; then
+               cp $ROOTFSUSERFILEPATH $PATH_TO_SDROOTFS/image/rootfs.tar.xz
+       else
+               cd $PATH_TO_SDROOTFS/
+               tar -cJf ../rootfs.tar.xz *
+               cd $START_DIR
+               mv rootfs.tar.xz $PATH_TO_SDROOTFS/image
+       fi
+       echo "rootfs.tar.xz copied"
+       [ -f ./mk-eMMC-boot.sh ] && cp -a mk-eMMC-boot.sh  $PATH_TO_SDROOTFS/mk_inand
+       # Copy Image to dest directory
+       if [ "$BOOTIMG" != "" ] ; then
+               cp $PATH_TO_SDBOOT/u-boot.img $PATH_TO_SDROOTFS/image
+               echo "u-boot.img copied"
+       elif [ "$BOOTBIN" != "" ] ; then
+               cp $PATH_TO_SDBOOT/u-boot.bin $PATH_TO_SDROOTFS/image
+               echo "u-boot.bin copied"
+       else
+               echo "No U-Boot file found"
+       fi
+
+       echo ""
+
+       if [ "$BOOTUENV" != "" ] ; then
+               cp $PATH_TO_SDBOOT/uEnv.txt $PATH_TO_SDROOTFS/image
+               echo "uEnv.txt copied"
+       fi
+
+       mv $START_DIR/initramfs.tar.xz $PATH_TO_SDROOTFS/image/initramfs.tar.xz
+       echo "initramfs.tar.xz copied"
+
+echo " "
+echo " "
+echo "Syncing..."
+sync
+sync
+sync
+sync
+sync
+sync
+sync
+sync
+
+fi
 
 # The following firmware are required for early boot, and therefore must be
 # copied to the boot partition.
@@ -1274,6 +1498,10 @@ echo " "
 echo "Un-mount the partitions "
 sudo umount -f $PATH_TO_SDBOOT
 sudo umount -f $PATH_TO_SDROOTFS
+if [ "$PARTS" -eq "5" ]
+then
+sudo umount -f $PATH_TO_SDINITRAMFS
+fi
 
 
 echo " "
@@ -1281,6 +1509,11 @@ echo "Remove created temp directories "
 sudo rm -rf $PATH_TO_TMP_DIR
 sudo rm -rf $PATH_TO_SDROOTFS
 sudo rm -rf $PATH_TO_SDBOOT
+if [ "$PARTS" -eq "2" ]
+then
+sudo rm -rf $PATH_TO_SDINITRAMFS
+sudo rm -rf $START_DIR/initramfstmp
+fi
 
 
 echo " "
